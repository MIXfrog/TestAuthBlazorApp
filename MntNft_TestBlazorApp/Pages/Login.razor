@page "/signin"
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider
@inject ILocalStorageService _localStorageService
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations;
@using MntNft_TestBlazorApp.Services;

<h3>Log in</h3>

<EditForm Model="@signinModel" OnValidSubmit="@SignIn">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="Login">Login</Label>
    <InputText id="Login" @bind-Value="signinModel.Login" />
    <label for="Password">Password</Label>
    <InputText id="Password" @bind-Value="signinModel.Password" type="password" />

    <button type="submit" class="btn btn-primary" style="margin-top: 10px; width:80px">Sign In</button>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3 mb-0">@error</div>
    }
</EditForm>

@code {

    private SigninModel signinModel = new();
    private string error;

    private const string CorrectLogin = "TestUserLogin";
    private const string CorrectPassword = "password";

    protected async override Task OnInitializedAsync()
    {
    }

    public async Task SignIn()
    {
        if (signinModel.Login.Equals(CorrectLogin) && signinModel.Password.Equals(CorrectPassword))
        {
            //get token from auth service by SigninModel params
            var token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6IlRlc3RVc2VyTG9naW4iLCJuYW1lIjoiVGVzdFVzZXJOYW1lIiwiaWF0IjoxNTE2MjM5MDIyfQ._WG7aGpzOFhOc7E8s7uJOpSHbCEuIXt--_fb9KLOtHM";

            await _localStorageService.SetItem("token", token);
            _authStateProvider.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo("/");
        }
        else
        {
            error = "User not found";
            StateHasChanged();
        }
    }

    public class SigninModel
    {
        [Required]
        public string? Login { get; set; }

        [Required]
        [MinLength(6, ErrorMessage = "Password must contain at least 6 characters")]
        public string? Password { get; set; }
    }
}